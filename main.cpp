#include <iostream>
#include <fstream>
#include <cstdlib>
#include <algorithm>
#include <future>
#include <stdint.h>
#include <limits.h>
#include <string.h>
#include <math.h>

//Number of centerpieces to use, 8 or 12, considerable memory use implications
#define centercount 12
//Number of cornerpieces to use, 6 or 8
#define cornercount  8 
//Split lookup table in array of 2bit values and compact binary tree, reduces
//memory consumption at the expense of more lookups
#define splitcomp    1
//create the tables by utilising the disk, halves memory consumption,
//usefull for creating the center12 table
#define disktablegen 1
//whether to use additive center tables
#define addcenter 0
//how many threads to use to generate the tables
#define corecount 4

using namespace std;

//the cube structure stores which part is at the indexed location
typedef struct {
  uint8_t edge[7];
  uint8_t center[24];
  uint8_t corner[24];
} cube ;

uint8_t *table[3];
const uint64_t tablesize[3] = {44089920,
#if centercount==8
25741485,
#else
46849502700,
#endif
#if cornercount==6
48454560,
#else
14827095360,
#endif
};

#if splitcomp
uint8_t *cotab[3];
const uint64_t cotabsize[3] = {13,108089320,34977176};  //what is the 13 doing there
#endif

const char* tablepath[3] = {"edges.bin","centers.bin","corners.bin"};
const char* tablename[3] = {"edge","center","corner"};
//const uint8_t  elemsol[3][8]= {{0,3,6,9,12,15,18,0},{0,1,2,3,8,9,10,11},{0,1,2,3,4,5,0,0}};

uint8_t solution[36][20];               //Add more bytes once those length become feasible

#include "arrays.cpp"

#include "helpers.cpp"					//various helper files for read, write and movemaking
#include "ifshit.cpp"                   //autogenerated binary decision tree functions for calc
#include "calc.cpp"				    	//functions for the depth calculations
#include "create.cpp"					//creates the depthlookuptables
#include "solve.cpp"					//the actual search algorithms to solve a given cube

int main(int argc, char** argv) {

for(uint8_t i=0;i<10;i++)
    solution[0][i]=i;

cout << *((uint64_t*) solution+0)+0 << "\n";

/*
  for(uint8_t i=0;i<3;i++)                //generate the tables, one after another
    gentable(i);
  
  //the following are example positions for testing purposes
  
  uint8_t n = 15;
  
  //cube Cube=goal();
  //Cube.corner[4]=5;
  //Cube.corner[5]=4;
  
  cube Cube=goal();
  uint8_t moves[15]={29, 3, 33, 21, 10, 34, 1, 35, 11, 25, 16, 5, 35, 16, 0};
  for(uint8_t i=0;i<n;i++) Cube=movecube(Cube,moves[i]);
  //printcube(Cube);
  
  cout << minDepth(goal())+0 << "\n";
  
  cout << minDepth(Cube)+0 << "\n";
  
  for(uint8_t i=minDepth(Cube);i<=n&&(!solve(Cube,i));i++)
    cout << "finished depth " << i+0 << "\n";
  for(uint8_t j=0;j<36;j++){
    for(uint8_t i=0;i<n;i++)
      cout << solution[j][i]+0 << ";"; 
    cout << "\n";
  }
*/
}
